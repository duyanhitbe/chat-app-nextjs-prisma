// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId()
  userId            String   @db.ObjectId()
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId()
  userId       String   @db.ObjectId()
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId()
  name          String?
  email         String?   @unique
  username      String?
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  messages Message[]

  conversationId String[]       @db.ObjectId()
  conversation   Conversation[] @relation(fields: [conversationId], references: [id])

  seenMessageIds String[]  @db.ObjectId()
  seenMessages   Message[] @relation(name: "Seen", fields: [seenMessageIds], references: [id])
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId()
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId()
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])

  messageIds String[]  @db.ObjectId
  messages   Message[]
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId()
  createdAt DateTime @default(now())
  body      String
  image     String?

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  seenIds String[] @db.ObjectId
  seen    User[]   @relation(name: "Seen", fields: [seenIds], references: [id])

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
